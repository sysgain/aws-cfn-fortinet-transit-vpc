{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {
      "FortiGateKeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "Name of and existing EC2 KeyPair to enable SSH access to the instance"
    },
      "FortiGateInstanceType" : {
			"Type" : "String",
			"Default" : "m3.medium",
			"AllowedValues" : ["m3.medium", "m3.large", "m3.xlarge","m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge"],
			"Description" : "Enter the instance type of FortiGates",
      "ConstraintDescription" : "must be a valid EC2 instance type."
		},
    "LicenseType" : {
      "Description" : "Select the License Type for your Fortinet Gateway Instance, between BYOL and OnDemand AMI's: - (FortiGate OnDemand - OnDemand & FortiGate - BYOL )",
      "Type" : "String",
      "Default" : "OnDemand",
      "AllowedValues" : ["OnDemand", "BYOL"]
    },
    "TagCreated" : {
      "Description" : "Date of the deployment being created",
      "Type" : "String"
    },
    "VpcCidrIp" : {
      "Description" : "Enter the CIDR for Transit VPC",
      "Type" : "String",
      "Default" :  "10.80.0.0/19"
    },
    "PublicSubnet1CIDR"  : {
			"Description" : "Enter CIDR for Transit Public Subnet1 Block",
			"Type"        : "String",
			"Default"     : "10.80.1.0/25",
			"AllowedPattern" : "[a-zA-Z0-9]+\\..+"
		},
    "PublicSubnet2CIDR"  : {
			"Description" : "Enter CIDR for Transit Public Subnet2 Block",
			"Type"        : "String",
			"Default"     : "10.80.2.0/25",
			"AllowedPattern" : "[a-zA-Z0-9]+\\..+"
		},
    "TagPrimaryOwner" : {
      "Description" : "Owner of the Product",
      "Type" : "String",
	  "Default" : "nvtuluva@sysgain.com"
    },
    "TagStack" : {
      "Description" : "Enter the name of the Stack",
      "Type" : "String",
	  "Default" : "Production"
    },
    "SpokeTag" : {
      "Description" : "Tag to use to identify spoke VGWs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "transitvpc:spoke"
    },
    "SpokeTagValue" : {
      "Description" : "Tag value to use to identify spoke VGWs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "true"
    },
    "S3Prefix" : {
      "Description" : "S3 prefix to append before S3 key names.",
      "Type" : "String",
      "Default" : "vpnconfigrations/"
    },
    "FortiGateBgp" : {
      "Description" : "Fortinet Gateway BGP  Transit VPC.",
      "Type" : "String",
      "Default" : "65008"
    }
  },
    "Mappings" : {
      "FortiRegionMap" : {
   				"us-east-1"      : { "OnDemand" : "ami-97f7d480", "BYOL" : "ami-f2f0d3e5"},
   				"us-east-2"      : { "OnDemand" : "ami-904b11f5", "BYOL" : ""},
    			"eu-west-1"      : { "OnDemand" : "ami-90c592e3", "BYOL" : "ami-113b9b71"},
    			"eu-west-2"      : { "OnDemand" : "ami-462d2722", "BYOL" : "ami-1ac79069"},
    			"eu-central-1"   : { "OnDemand" : "ami-7ea45e11", "BYOL" : "ami-22a75d4d"},
    			"ap-northeast-1" : { "OnDemand" : "ami-a2b917c3", "BYOL" : "ami-eebb158f"},
    			"ap-northeast-2" : { "OnDemand" : "ami-a84296c6", "BYOL" : "ami-c74c98a9"}, 
    			"ap-southeast-1" : { "OnDemand" : "ami-24359547", "BYOL" : "ami-67359504"}, 
    			"ap-southeast-2" : { "OnDemand" : "ami-f969569a", "BYOL" : "ami-686b540b"},
    			"ap-south-1"     : { "OnDemand" : "ami-6c9aee03", "BYOL" : "ami-dd9befb2"},
    			"sa-east-1"		   : { "OnDemand" : "ami-15f56a79", "BYOL" : "ami-f0f8679c"}, 
    			"us-west-1"      : { "OnDemand" : "ami-76e8a216", "BYOL" : "ami-3be8a25b" }, 
    			"us-west-2"      : { "OnDemand" : "ami-933797f3", "BYOL" : "ami-e62f2582"},
    			"ca-central-1"   : { "OnDemand" : "ami-e5823081", "BYOL" : "ami-698a380d"}
  				},
          "Function" : {
      "Poller" : { 
	"CodeLocation" : "solutions-reference/transit-vpc/v3/transit-vpc-poller.py",
	"CodeRegion" : "us-east-1",
	"Name" : "vgw-poller",
        "Description": "Transit VPC: Poller function responsible for identifying specifically tagged VGWs and creating VPN connections to transit VPC.",
        "Runtime": "python2.7",
        "Timeout": "120",
        "MemorySize": "128"
      },
      "FindReplace" : {
	"S3BucketID" : "%BUCKET_NAME%",
	"S3PrefixID" : "%PREFIX%",
	"Deliminator" : "|"
      },
      "FortiGateKeys" : {
	"UserName" : "automate",
	"PasswordLength" : "15",
	"PrivateKey" : "prikey.pem",
	"PublicKey" : "pubkey.pem"
      }
    }
    },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
	    "DeletionPolicy" : "Retain",
      "Properties": {
        "CidrBlock": { "Ref" : "VpcCidrIp" },
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", ["VPC-",  {"Ref" : "TagStack" }]]}
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          }
        ]
      }
    },
"PublicSubnetFrontEnd1a": {
      "Type": "AWS::EC2::Subnet",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "CidrBlock" : {
					"Ref" : "PublicSubnet1CIDR"
					},
        "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]},
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "TagStack" } , "_PublicSubnet_1a_FrontEnd"]]}
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          }
        ]
      }
},
"PublicSubnetFrontEnd1b": {
    "Type": "AWS::EC2::Subnet",
	"DeletionPolicy" : "Retain",
    "Properties": {
    "CidrBlock" : {
					"Ref" : "PublicSubnet2CIDR"
					},
        "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]},
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "TagStack" } , "_PublicSubnet_1b_FrontEnd"]]}
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          }
        ]
    }
},
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DeletionPolicy" : "Retain"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::RouteTable",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
       "Tags": [
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "TagStack" } , "_PublicRouteTable"]]}
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          }
        ]
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRoute"
        },
        "SubnetId": {
          "Ref": "PublicSubnetFrontEnd1a"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRoute"
        },
        "SubnetId": {
          "Ref": "PublicSubnetFrontEnd1b"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
	  "DeletionPolicy" : "Retain",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRoute"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action":["s3:*"],
            "Resource":["*"]
          }]
        },
        "RouteTableIds" : [ {"Ref" : "PublicRoute"} ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref" : "VPC"}
      }
    },
    "sgFortiGateSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "FORTIGATE Security Group",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "541",
            "ToPort": "541",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1000",
            "ToPort": "1000",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "10443",
            "ToPort": "10443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8009",
            "ToPort": "8009",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1003",
            "ToPort": "1003",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "703",
            "ToPort": "703",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8900",
            "ToPort": "8900",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8010",
            "ToPort": "8010",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8008",
            "ToPort": "8008",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "FORTIGateEip1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "FortiGate1a" }
      }
    },
    "FORTIGateEip2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "FortiGate1b"}
      }
    },
   "FortiGate1a": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId" : { "Fn::FindInMap" : [ "FortiRegionMap", { "Ref" : "AWS::Region" }, { "Ref": "LicenseType" }] },
        "InstanceType" : { "Ref" : "FortiGateInstanceType" },
        "KeyName" : {"Ref" : "FortiGateKeyName"},
        "Monitoring": "false",
		    "SourceDestCheck"  : "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "TagStack" } , "_Fortigate_01"]]}
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          },
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetFrontEnd1a"
            },
            "GroupSet": [
              {
                "Ref": "sgFortiGateSG"
              }
            ]
          }
        ]
      }
    },
    "FortiGate1b": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId" : { "Fn::FindInMap" : [ "FortiRegionMap", { "Ref" : "AWS::Region" }, { "Ref": "LicenseType" }] },
        "InstanceType" : { "Ref" : "FortiGateInstanceType" },
        "KeyName" : {"Ref" : "FortiGateKeyName"},
        "Monitoring": "false",
		    "SourceDestCheck"  : "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Join" : ["", [ { "Ref" : "TagStack" } , "_Fortigate_02"]]}
          },
          {
            "Key": "Owner",
            "Value": { "Ref" : "TagPrimaryOwner" }
          },
          {
            "Key": "Stack",
            "Value": { "Ref" : "TagStack" }
          },
          {
            "Key": "Created",
            "Value": { "Ref" : "TagCreated" }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PublicSubnetFrontEnd1b"
            },
            "GroupSet": [
              {
                "Ref": "sgFortiGateSG"
              }
            ]
          }
        ]
      }
    },
    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket"
    },
    "S3BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : {"Ref" : "S3Bucket" },
        "PolicyDocument": {
          "Statement":[ {
      "Sid": "DenyUnEncryptedObjectUploads",
      "Action": [
        "s3:PutObject"
      ],
      "Effect": "Deny",
      "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
      "Condition": {
        "StringNotEquals": {
          "s3:x-amz-server-side-encryption": "aws:kms"
        }
      },
      "Principal": "*"
    },
    {
	    "Action":["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"],
	    "Effect":"Allow",
	    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" },"/",{ "Ref" : "S3Prefix" }, "*" ]]},
	    "Principal": "*"
	  }
  ]
        }
      }
    },
    "KMSKey" : {
      "Type" : "AWS::KMS::Key",
      "Properties" : {
        "Description" : "TransitVPC CMK for S3 SSE-KMS",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "transit-vpc-1",
          "Statement": [ {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
              "kms:*"
            ], 
            "Resource": "*"
          },
	  {
            "Sid": "Allow use of the key",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:DescribeKey"
            ], 
            "Resource": "*"
          } ]
        }
      }
    },
    "SolutionHelperRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
   },
   "SolutionHelperRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
	  "Roles" : [ { "Ref" : "SolutionHelperRole" } ],
          "PolicyName": "Solution_Helper_Permissions",
          "PolicyDocument": {
              "Version" : "2012-10-17",
	      "Statement": [
		{
		  "Effect": "Allow",
		  "Action": [
		    "logs:CreateLogGroup",
		    "logs:CreateLogStream",
		    "logs:PutLogEvents"
		  ],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "s3:PutBucketNotification"
		  ],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" } ]] }
		},
		{
		  "Effect": "Allow",
		  "Action": [
		    "lambda:*",
		    "events:*",
		    "ec2:DescribeSecurityGroups",
		    "ec2:DescribeSubnets",
	            "ec2:DescribeVpcs"
		  ],
		  "Resource": "*"
		},
		{
		  "Effect": "Allow",
		  "Action": [
		    "iam:PassRole"
		  ],
		  "Resource": [{ "Fn::GetAtt" : [ "TransitVpcPollerRole", "Arn" ] }]
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
		  ],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" ]] }
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "s3:GetObject"
		  ],
		  "Resource": "arn:aws:s3:::solutions-reference/*"
		}
	     ]
        }
      }
   },
   "SolutionHelper": {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : "SolutionHelperRolePolicy",
      "Properties": {
      	"Handler": "solution-helper.lambda_handler",
      	"Role": { "Fn::GetAtt" : [ "SolutionHelperRole" , "Arn" ] },
        "Description": "Transit VPC: CloudFormation custom resource function invoked during transit VPC CloudFormation create, update, and delete stack operations.",
      	"Code": {
      	  "S3Bucket": { "Fn::Join": ["", ["solutions-", {"Ref" : "AWS::Region"}]] },
      	  "S3Key": "library/solution-helper/v3/solution-helper.zip"
      	},
      	"Runtime": "python2.7",
      	"Timeout": "60"
     }
   },
   "CreateRsaKey": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateSshKey" : { "Fn::Join": ["", [
		"{ 'Bucket' : '",{ "Ref" : "S3Bucket" },"', ",
		"'SSEKMSKeyId' : 'arn:aws:kms:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":key/", { "Ref" : "KMSKey" }, "', ", 
		"'PrivateKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "FortiGateKeys", "PrivateKey"]}, "', ", 
		"'PublicKey' : '", { "Ref" : "S3Prefix" }, { "Fn::FindInMap" : [ "Function", "FortiGateKeys", "PublicKey"]}, "' ",
		"}"
	]] }
     }
   },
   "CreateRandomPassword": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "CreateRandomPassword" : { "Fn::FindInMap" : [ "Function", "FortiGateKeys", "PasswordLength"]},
       "RandomPasswordSpecialCharacters": "False"
     }
   },
"TransitVpcPollerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          } ]
        },
        "Path": "/"
      }
    },
    "TransitVpcPollerRolePolicy" : {
      "Type": "AWS::IAM::Policy",
      "Properties": {
	  "Roles" : [ { "Ref" : "TransitVpcPollerRole" } ],
          "PolicyName": "Transit_VPC_Poller_Function_Permissions",
          "PolicyDocument": {
              "Version" : "2012-10-17",
	      "Statement": [
		{
		  "Effect": "Allow",
		  "Action": [
		    "logs:CreateLogGroup",
		    "logs:CreateLogStream",
		    "logs:PutLogEvents"
		  ],
		  "Resource": { "Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "ec2:Describe*",
                    "ec2:CreateTags",
                    "ec2:CreateCustomerGateway",
                    "ec2:DeleteCustomerGateway",
                    "ec2:CreateVpnConnection",
                    "ec2:DeleteVpnConnection"
		  ],
		  "Resource": "*"
		},
		{
		  "Effect": "Allow",
		  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject"
		  ],
		  "Resource": { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/", {"Ref": "S3Prefix"}, "*" 	]] }
		}
	     ]
        }
      } 
    },
    "PollerFunct": {
     "Type": "Custom::LoadLambda",
     "Properties": {
       "ServiceToken": { "Fn::GetAtt" : ["SolutionHelper", "Arn"] },
       "Region": { "Ref": "AWS::Region" },
       "LambdaCode": { "Fn::FindInMap" : [ "Function", "Poller", "CodeLocation"]},
       "LambdaCodeRegion": { "Fn::FindInMap" : [ "Function", "Poller", "CodeRegion"]},
       "Deliminator": { "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
       "FunctionName": { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, "-", { "Fn::FindInMap" : [ "Function", "Poller", "Name"]} ]] },
       "Role": { "Fn::GetAtt" : [ "TransitVpcPollerRole", "Arn" ] },
       "CloudWatchEvent" : { "Fn::Join": ["", [
		"{ 'RuleName' : '",{ "Ref" : "AWS::StackName" },"-VGW-Poller-1min', ",
		"'ScheduleExpression' : 'cron(* * * * ? *)',",
		"'Description': 'Transit VPC: Rule to trigger VGW-Poller every minute to find VGWs that need to be attached to the transit VPC.' }"
	]] },
       "Runtime": { "Fn::FindInMap" : [ "Function", "Poller", "Runtime"]},
       "Description": { "Fn::FindInMap" : [ "Function", "Poller", "Description"]},
       "Timeout": { "Fn::FindInMap" : [ "Function", "Poller", "Timeout"]},
       "MemorySize": { "Fn::FindInMap" : [ "Function", "Poller", "MemorySize"]},
       "FindReplace" : { "Fn::Join": ["", [
		{ "Fn::FindInMap" : [ "Function", "FindReplace", "S3BucketID"]},
		{ "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
		{ "Ref" : "S3Bucket" },",",
		{ "Fn::FindInMap" : [ "Function", "FindReplace", "S3PrefixID"]},
		{ "Fn::FindInMap" : [ "Function", "FindReplace", "Deliminator"]},
		{ "Ref" : "S3Prefix" }
	]] }
     }
   }
  },
"Outputs" : {
    "UsernameforFortiGate1" : {
			"Value" : "admin",
			"Description" : "Username to Access Fortigate"
		},
    "PasswordforFortiGate1" : {
			"Value" : { "Ref" : "FortiGate1a"},
			"Description" : "Password to login to Fortigate is the instance id"
		},
        "Fortigate1ConsoleAccess" : {
			"Value" : {
				"Fn::Join" : [
					"",
					[
						"https://", {
							"Ref" : "FORTIGateEip1"
						}
					]
				]
			},
			"Description" : "Connection to Fortigate1"
		},
    "UsernameforFortiGate2" : {
			"Value" : "admin",
			"Description" : "Username to Access Fortigate"
		},
    "PasswordforFortiGate2" : {
			"Value" : { "Ref" : "FortiGate1b"},
			"Description" : "Password to login to Fortigate is the instance id"
		},
        "Fortigate2ConsoleAccess" : {
			"Value" : {
				"Fn::Join" : [
					"",
					[
						"https://", { "Ref" : "FORTIGateEip2" }
					]
				]
			},
			"Description" : "Connection to Fortigate2 Instance"
		}
}
}